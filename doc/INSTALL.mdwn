% Installing

gcc‑lua is available from a [git repository]:

~~~
git clone http://git.colberg.org/gcc-lua
~~~

In the repository, checkout the latest release version:

~~~
git checkout 1.0.0
~~~

If you have GnuPG, verify that the tag is signed by the following key:

~~~
git tag -v 1.0.0
~~~

~~~
Primary key fingerprint: 2997 6EC2 2BD1 EBBC CC77  F3A6 183B D5ED 3527 8611
     Subkey fingerprint: 983B F9D0 F02A 6014 0CEC  529F 767E 12A8 C92A 31CB
~~~

To compile the plugin, run:

~~~
make
~~~

A distribution may ship the GCC plugin development headers in a separate
package. The Debian distribution, for example, provides the package
gcc-4.7-plugin-dev for GCC 4.7.

The plugin is accompanied by a test suite:

~~~
make test
~~~

While the plugin is written in C, by default it is compiled with the GNU C++
compiler. C++ will be the default from GCC 4.8 onwards, and many distributions
already ship a version of GCC 4.7 compiled with `g++`. If the plugin fails to
load due to unresolved symbols, try compiling with `gcc` instead.

To compile the plugin using the GNU C compiler, set the make variable `CC`:

~~~
make CC=gcc
~~~

To compile the plugin using a non‑default GNU C++ compiler, override `CXX`:

~~~
make CXX=g++-4.7
~~~

The make variables `CC` or `CXX` apply to the test suite as well.

By default, `pkg-config` is used to find the Lua library.

If the Lua library cannot be found, override `LUACFLAGS` and `LUALIBS`:

~~~
make LUACFLAGS="-I/usr/include/lua5.1" LUALIBS="-L/usr/lib -llua5.1"
~~~

[git repository]: http://git.colberg.org/gcc-lua
