---
title: Installing
---

Before installing HDF5 for Lua, [obtain the HDF5 1.8 library] if not shipped
with your distribution.

[obtain the HDF5 1.8 library]: http://www.hdfgroup.org/HDF5/release/obtain5.html


Git
---

HDF5 for Lua for Lua is available from a [git repository]:

~~~
git clone http://git.colberg.org/lua-hdf5
~~~

In the repository, checkout the latest release version:

~~~
git checkout 1.0.0
~~~

If you have GnuPG, verify that the tag is signed by the following key:

~~~
git tag -v 1.0.0
~~~

~~~
Primary key fingerprint: 2997 6EC2 2BD1 EBBC CC77  F3A6 183B D5ED 3527 8611
     Subkey fingerprint: 983B F9D0 F02A 6014 0CEC  529F 767E 12A8 C92A 31CB
~~~

The module is accompanied by a test suite:

~~~
make test
~~~

If HDF5 is compiled with MPI-IO support, set `MPIEXEC`:

~~~
make test MPIEXEC="mpirun -np 8"
~~~

[git repository]: http://git.colberg.org/lua-hdf5


LuaRocks
--------

HDF5 for Lua for Lua is available from the default [LuaRocks mirror]:

~~~
luarocks install --local lua-hdf5
~~~

You may wish to remove older versions before installing:

~~~
luarocks remove --local lua-hdf5
~~~

To use the module, set the Lua module path in your shell's startup file:

~~~
eval `luarocks path`
~~~

If the LuaRocks mirror is not available, install from the git repository above:

~~~
luarocks install --local rockspec/lua-hdf5-1.0.0-1.rockspec
~~~

To install the module directly from the git source, use:

~~~
luarocks make --local rockspec/lua-hdf5-1.0.0-1.rockspec
~~~

In this case you must manually git checkout the corresponding version beforehand.

[LuaRocks mirror]: http://luarocks.org/repositories/rocks/#lua-hdf5


FFI C bindings
--------------

HDF5 for Lua includes precompiled FFI C bindings for the HDF5 library with
support for parallel HDF5 using [Open MPI]. If you wish to compile the FFI
C bindings yourself, for example when using a different MPI library or when
packaging for a distribution, you need to install the [Lua plugin for GCC]
and [cdecl for GCC].

To generate FFI C bindings that match the HDF5 library, run:

~~~
make -B hdf5
~~~

This assumes that the Lua plugin for GCC is installed in the [GCC plugin
directory].

If the plugin is located in a different directory, override the make variable
`GCCLUA`:

~~~
make -B hdf5 GCCLUA=${HOME}/projects/gcc-lua/gcc/gcclua.so
~~~

You may also specify the plugin directory in the environment variable
`LD_LIBRARY_PATH`:

~~~
export LD_LIBRARY_PATH="${HOME}/projects/gcc-lua/gcc${LD_LIBRARY_PATH+:$LD_LIBRARY_PATH}"
~~~

The plugin may then be loaded by passing its filename:

~~~
make -B hdf5 GCCLUA=gcclua.so
~~~

To override the default MPI compiler `mpicc` for parallel HDF5, set `CPP`:

~~~
make -B hdf5 CPP=mpicc.mpich
~~~

To override the default GCC C compiler `gcc`, set `CC`:

~~~
make -B hdf5 CC=gcc-4.7
~~~

If the HDF5 header files are not installed in a system path, set `CPATH`:

~~~
export CPATH=/opt/hdf5-1.8.12/include:${HOME}/.luarocks/lib/luarocks/rocks/gcc-lua-cdecl/2.0.1-1/include
~~~

To override the name of the HDF5 library, set `LIBNAME`:

~~~
make -B hdf5 LIBNAME=libhdf5.so.7
~~~

[Lua plugin for GCC]: http://colberg.org/gcc-lua/
[cdecl for GCC]: http://colberg.org/gcc-lua-cdecl/
[GCC plugin directory]: http://gcc.gnu.org/onlinedocs/gccint/Plugins-loading.html
[Open MPI]: http://www.open-mpi.org/
